#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SabJeeLelo
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Demo")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBillTbl(BillTbl instance);
    partial void UpdateBillTbl(BillTbl instance);
    partial void DeleteBillTbl(BillTbl instance);
    partial void InsertProductTbl(ProductTbl instance);
    partial void UpdateProductTbl(ProductTbl instance);
    partial void DeleteProductTbl(ProductTbl instance);
    partial void InsertSellerTbl(SellerTbl instance);
    partial void UpdateSellerTbl(SellerTbl instance);
    partial void DeleteSellerTbl(SellerTbl instance);
    partial void InsertTypeTbl(TypeTbl instance);
    partial void UpdateTypeTbl(TypeTbl instance);
    partial void DeleteTypeTbl(TypeTbl instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::SabJeeLelo.Properties.Settings.Default.DemoConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<BillTbl> BillTbls
		{
			get
			{
				return this.GetTable<BillTbl>();
			}
		}
		
		public System.Data.Linq.Table<ProductTbl> ProductTbls
		{
			get
			{
				return this.GetTable<ProductTbl>();
			}
		}
		
		public System.Data.Linq.Table<SellerTbl> SellerTbls
		{
			get
			{
				return this.GetTable<SellerTbl>();
			}
		}
		
		public System.Data.Linq.Table<TypeTbl> TypeTbls
		{
			get
			{
				return this.GetTable<TypeTbl>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BillTbl")]
	public partial class BillTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BillingCode;
		
		private string _CustomerName;
		
		private string _CustomerPhone;
		
		private System.Nullable<int> _SellerID;
		
		private System.DateTime _BuyingDate;
		
		private decimal _Amount;
		
		private EntityRef<SellerTbl> _SellerTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBillingCodeChanging(int value);
    partial void OnBillingCodeChanged();
    partial void OnCustomerNameChanging(string value);
    partial void OnCustomerNameChanged();
    partial void OnCustomerPhoneChanging(string value);
    partial void OnCustomerPhoneChanged();
    partial void OnSellerIDChanging(System.Nullable<int> value);
    partial void OnSellerIDChanged();
    partial void OnBuyingDateChanging(System.DateTime value);
    partial void OnBuyingDateChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    #endregion
		
		public BillTbl()
		{
			this._SellerTbl = default(EntityRef<SellerTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BillingCode", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BillingCode
		{
			get
			{
				return this._BillingCode;
			}
			set
			{
				if ((this._BillingCode != value))
				{
					this.OnBillingCodeChanging(value);
					this.SendPropertyChanging();
					this._BillingCode = value;
					this.SendPropertyChanged("BillingCode");
					this.OnBillingCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string CustomerName
		{
			get
			{
				return this._CustomerName;
			}
			set
			{
				if ((this._CustomerName != value))
				{
					this.OnCustomerNameChanging(value);
					this.SendPropertyChanging();
					this._CustomerName = value;
					this.SendPropertyChanged("CustomerName");
					this.OnCustomerNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerPhone", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string CustomerPhone
		{
			get
			{
				return this._CustomerPhone;
			}
			set
			{
				if ((this._CustomerPhone != value))
				{
					this.OnCustomerPhoneChanging(value);
					this.SendPropertyChanging();
					this._CustomerPhone = value;
					this.SendPropertyChanged("CustomerPhone");
					this.OnCustomerPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SellerID", DbType="Int")]
		public System.Nullable<int> SellerID
		{
			get
			{
				return this._SellerID;
			}
			set
			{
				if ((this._SellerID != value))
				{
					if (this._SellerTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSellerIDChanging(value);
					this.SendPropertyChanging();
					this._SellerID = value;
					this.SendPropertyChanged("SellerID");
					this.OnSellerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuyingDate", DbType="Date NOT NULL")]
		public System.DateTime BuyingDate
		{
			get
			{
				return this._BuyingDate;
			}
			set
			{
				if ((this._BuyingDate != value))
				{
					this.OnBuyingDateChanging(value);
					this.SendPropertyChanging();
					this._BuyingDate = value;
					this.SendPropertyChanged("BuyingDate");
					this.OnBuyingDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Decimal(12,2) NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SellerTbl_BillTbl", Storage="_SellerTbl", ThisKey="SellerID", OtherKey="SellerCode", IsForeignKey=true)]
		public SellerTbl SellerTbl
		{
			get
			{
				return this._SellerTbl.Entity;
			}
			set
			{
				SellerTbl previousValue = this._SellerTbl.Entity;
				if (((previousValue != value) 
							|| (this._SellerTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SellerTbl.Entity = null;
						previousValue.BillTbls.Remove(this);
					}
					this._SellerTbl.Entity = value;
					if ((value != null))
					{
						value.BillTbls.Add(this);
						this._SellerID = value.SellerCode;
					}
					else
					{
						this._SellerID = default(Nullable<int>);
					}
					this.SendPropertyChanged("SellerTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductTbl")]
	public partial class ProductTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductCode;
		
		private string _ProductName;
		
		private string _Description;
		
		private System.Nullable<int> _ProductTypeCode;
		
		private decimal _ProductPrice;
		
		private int _Stock;
		
		private EntityRef<TypeTbl> _TypeTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductCodeChanging(int value);
    partial void OnProductCodeChanged();
    partial void OnProductNameChanging(string value);
    partial void OnProductNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnProductTypeCodeChanging(System.Nullable<int> value);
    partial void OnProductTypeCodeChanged();
    partial void OnProductPriceChanging(decimal value);
    partial void OnProductPriceChanged();
    partial void OnStockChanging(int value);
    partial void OnStockChanged();
    #endregion
		
		public ProductTbl()
		{
			this._TypeTbl = default(EntityRef<TypeTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductCode", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProductCode
		{
			get
			{
				return this._ProductCode;
			}
			set
			{
				if ((this._ProductCode != value))
				{
					this.OnProductCodeChanging(value);
					this.SendPropertyChanging();
					this._ProductCode = value;
					this.SendPropertyChanged("ProductCode");
					this.OnProductCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string ProductName
		{
			get
			{
				return this._ProductName;
			}
			set
			{
				if ((this._ProductName != value))
				{
					this.OnProductNameChanging(value);
					this.SendPropertyChanging();
					this._ProductName = value;
					this.SendPropertyChanged("ProductName");
					this.OnProductNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(255)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductTypeCode", DbType="Int")]
		public System.Nullable<int> ProductTypeCode
		{
			get
			{
				return this._ProductTypeCode;
			}
			set
			{
				if ((this._ProductTypeCode != value))
				{
					if (this._TypeTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductTypeCodeChanging(value);
					this.SendPropertyChanging();
					this._ProductTypeCode = value;
					this.SendPropertyChanged("ProductTypeCode");
					this.OnProductTypeCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductPrice", DbType="Decimal(10,2) NOT NULL")]
		public decimal ProductPrice
		{
			get
			{
				return this._ProductPrice;
			}
			set
			{
				if ((this._ProductPrice != value))
				{
					this.OnProductPriceChanging(value);
					this.SendPropertyChanging();
					this._ProductPrice = value;
					this.SendPropertyChanged("ProductPrice");
					this.OnProductPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Stock", DbType="Int NOT NULL")]
		public int Stock
		{
			get
			{
				return this._Stock;
			}
			set
			{
				if ((this._Stock != value))
				{
					this.OnStockChanging(value);
					this.SendPropertyChanging();
					this._Stock = value;
					this.SendPropertyChanged("Stock");
					this.OnStockChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TypeTbl_ProductTbl", Storage="_TypeTbl", ThisKey="ProductTypeCode", OtherKey="TypeCode", IsForeignKey=true)]
		public TypeTbl TypeTbl
		{
			get
			{
				return this._TypeTbl.Entity;
			}
			set
			{
				TypeTbl previousValue = this._TypeTbl.Entity;
				if (((previousValue != value) 
							|| (this._TypeTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TypeTbl.Entity = null;
						previousValue.ProductTbls.Remove(this);
					}
					this._TypeTbl.Entity = value;
					if ((value != null))
					{
						value.ProductTbls.Add(this);
						this._ProductTypeCode = value.TypeCode;
					}
					else
					{
						this._ProductTypeCode = default(Nullable<int>);
					}
					this.SendPropertyChanged("TypeTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SellerTbl")]
	public partial class SellerTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SellerCode;
		
		private string _SellerPassword;
		
		private string _SellerPhone;
		
		private System.Nullable<char> _SellerGender;
		
		private string _SellerName;
		
		private EntitySet<BillTbl> _BillTbls;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSellerCodeChanging(int value);
    partial void OnSellerCodeChanged();
    partial void OnSellerPasswordChanging(string value);
    partial void OnSellerPasswordChanged();
    partial void OnSellerPhoneChanging(string value);
    partial void OnSellerPhoneChanged();
    partial void OnSellerGenderChanging(System.Nullable<char> value);
    partial void OnSellerGenderChanged();
    partial void OnSellerNameChanging(string value);
    partial void OnSellerNameChanged();
    #endregion
		
		public SellerTbl()
		{
			this._BillTbls = new EntitySet<BillTbl>(new Action<BillTbl>(this.attach_BillTbls), new Action<BillTbl>(this.detach_BillTbls));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SellerCode", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SellerCode
		{
			get
			{
				return this._SellerCode;
			}
			set
			{
				if ((this._SellerCode != value))
				{
					this.OnSellerCodeChanging(value);
					this.SendPropertyChanging();
					this._SellerCode = value;
					this.SendPropertyChanged("SellerCode");
					this.OnSellerCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SellerPassword", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string SellerPassword
		{
			get
			{
				return this._SellerPassword;
			}
			set
			{
				if ((this._SellerPassword != value))
				{
					this.OnSellerPasswordChanging(value);
					this.SendPropertyChanging();
					this._SellerPassword = value;
					this.SendPropertyChanged("SellerPassword");
					this.OnSellerPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SellerPhone", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string SellerPhone
		{
			get
			{
				return this._SellerPhone;
			}
			set
			{
				if ((this._SellerPhone != value))
				{
					this.OnSellerPhoneChanging(value);
					this.SendPropertyChanging();
					this._SellerPhone = value;
					this.SendPropertyChanged("SellerPhone");
					this.OnSellerPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SellerGender", DbType="Char(1)")]
		public System.Nullable<char> SellerGender
		{
			get
			{
				return this._SellerGender;
			}
			set
			{
				if ((this._SellerGender != value))
				{
					this.OnSellerGenderChanging(value);
					this.SendPropertyChanging();
					this._SellerGender = value;
					this.SendPropertyChanged("SellerGender");
					this.OnSellerGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SellerName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string SellerName
		{
			get
			{
				return this._SellerName;
			}
			set
			{
				if ((this._SellerName != value))
				{
					this.OnSellerNameChanging(value);
					this.SendPropertyChanging();
					this._SellerName = value;
					this.SendPropertyChanged("SellerName");
					this.OnSellerNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SellerTbl_BillTbl", Storage="_BillTbls", ThisKey="SellerCode", OtherKey="SellerID")]
		public EntitySet<BillTbl> BillTbls
		{
			get
			{
				return this._BillTbls;
			}
			set
			{
				this._BillTbls.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BillTbls(BillTbl entity)
		{
			this.SendPropertyChanging();
			entity.SellerTbl = this;
		}
		
		private void detach_BillTbls(BillTbl entity)
		{
			this.SendPropertyChanging();
			entity.SellerTbl = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TypeTbl")]
	public partial class TypeTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TypeCode;
		
		private string _TypeName;
		
		private string _Description;
		
		private EntitySet<ProductTbl> _ProductTbls;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTypeCodeChanging(int value);
    partial void OnTypeCodeChanged();
    partial void OnTypeNameChanging(string value);
    partial void OnTypeNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public TypeTbl()
		{
			this._ProductTbls = new EntitySet<ProductTbl>(new Action<ProductTbl>(this.attach_ProductTbls), new Action<ProductTbl>(this.detach_ProductTbls));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeCode", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TypeCode
		{
			get
			{
				return this._TypeCode;
			}
			set
			{
				if ((this._TypeCode != value))
				{
					this.OnTypeCodeChanging(value);
					this.SendPropertyChanging();
					this._TypeCode = value;
					this.SendPropertyChanged("TypeCode");
					this.OnTypeCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string TypeName
		{
			get
			{
				return this._TypeName;
			}
			set
			{
				if ((this._TypeName != value))
				{
					this.OnTypeNameChanging(value);
					this.SendPropertyChanging();
					this._TypeName = value;
					this.SendPropertyChanged("TypeName");
					this.OnTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(150)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TypeTbl_ProductTbl", Storage="_ProductTbls", ThisKey="TypeCode", OtherKey="ProductTypeCode")]
		public EntitySet<ProductTbl> ProductTbls
		{
			get
			{
				return this._ProductTbls;
			}
			set
			{
				this._ProductTbls.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProductTbls(ProductTbl entity)
		{
			this.SendPropertyChanging();
			entity.TypeTbl = this;
		}
		
		private void detach_ProductTbls(ProductTbl entity)
		{
			this.SendPropertyChanging();
			entity.TypeTbl = null;
		}
	}
}
#pragma warning restore 1591
